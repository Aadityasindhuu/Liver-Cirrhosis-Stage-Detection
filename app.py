import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport joblib\nfrom sklearn.preprocessing import LabelEncoder\nimport os\n\n# Set page config\nst.set_page_config(\n    page_title='Liver Cirrhosis Stage Prediction',\n    page_icon='ü©∫',\n    layout='wide'\n)\n\n# Load model and preprocessing objects\n@st.cache_resource\ndef load_artifacts():\n    model = joblib.load('artifacts/best_cirrhosis_model.joblib')\n    scaler = joblib.load('artifacts/feature_scaler.joblib')\n\n    # Load encoders\n    encoders = {}\n    encoder_files = {\n        'Sex': 'Sex_encoder.joblib',\n        'Ascites': 'Ascites_encoder.joblib',\n        'Hepatomegaly': 'Hepatomegaly_encoder.joblib',\n        'Spiders': 'Spiders_encoder.joblib',\n        'Edema': 'Edema_encoder.joblib'\n    }\n\n    for col, filename in encoder_files.items():\n        try:\n            encoders[col] = joblib.load(f'artifacts/{filename}')\n        except:\n            # Create dummy encoder if file not found\n            encoders[col] = LabelEncoder()\n            # Fit with expected values\n            if col == 'Sex':\n                encoders[col].fit(['F', 'M'])\n            else:\n                encoders[col].fit(['Y', 'N'])\n\n\n    return model, scaler, encoders\n\n# Load artifacts outside the function for direct access\nmodel, scaler, encoders = load_artifacts()\n\n\n# Expected feature names (adjust based on your model)\n# Get feature names from training (adjust based on your actual features)\n# Ensure all features from X.columns are included\nfeature_names = ['N_Days', 'Age', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema',\n                 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper', 'Alk_Phos', 'SGOT',\n                 'Tryglicerides', 'Platelets', 'Prothrombin', 'Drug_Placebo']\n\n\n# App UI\nst.title('ü©∫ Liver Cirrhosis Stage Prediction')\nst.write('''\nPredict the histologic stage of liver disease (1, 2, or 3) based on clinical and laboratory data.\nThis tool is for research purposes only and should not replace professional medical advice.\n''')\n\nwith st.expander('‚ÑπÔ∏è About this tool'):\n    st.write('''\n    - **Stage 1**: Early fibrosis with no significant scarring\n    - **Stage 2**: Moderate fibrosis with some scarring\n    - **Stage 3**: Severe fibrosis/cirrhosis with extensive scarring\n    ''')\n    st.write('Model: XGBoost Classifier (trained on Mayo Clinic PBC data)') # Updated model name\n\n\n# Input form\nwith st.form('patient_form'):\n    st.subheader('Patient Clinical Data')\n\n    col1, col2 = st.columns(2)\n\n    with col1:\n        n_days = st.number_input('Number of Days since Diagnosis', min_value=0, value=1000)\n        age = st.number_input('Age (years)', min_value=18, max_value=100, value=50)\n        sex = st.radio('Sex', ['F', 'M'], horizontal=True)\n        albumin = st.number_input('Albumin (g/dL)', min_value=1.0, max_value=6.0, value=3.5, step=0.1)\n        alk_phos = st.number_input('Alkaline Phosphatase (U/L)', min_value=0, value=120)\n\n\n    with col2:\n        bilirubin = st.number_input('Bilirubin (mg/dL)', min_value=0.0, value=1.2, step=0.1)\n        cholesterol = st.number_input('Cholesterol (mg/dL)', min_value=0, value=200)\n        prothrombin = st.number_input('Prothrombin time (seconds)', min_value=5, max_value=30, value=11)\n        copper = st.number_input('Copper (Œºg/dL)', min_value=0, value=90)\n        sgot = st.number_input('SGOT (U/L)', min_value=0, value=50)\n        tryglicerides = st.number_input('Tryglicerides (mg/dL)', min_value=0, value=100)\n        platelets = st.number_input('Platelets', min_value=0, value=200)\n\n\n    st.subheader('Physical Examination Findings')\n    exam_col1, exam_col2 = st.columns(2)\n    with exam_col1:\n        hepatomegaly = st.radio('Hepatomegaly', ['N', 'Y'], horizontal=True)\n        spiders = st.radio('Spiders (spider angiomas)', ['N', 'Y'], horizontal=True)\n    with exam_col2:\n        edema = st.radio('Edema', ['N', 'Y'], horizontal=True)\n        ascites = st.radio('Ascites', ['N', 'Y'], horizontal=True)\n\n    drug = st.radio('Treatment', ['D-penicillamine', 'placebo'], horizontal=True)\n\n    submitted = st.form_submit_button('Predict Stage')\n\n# Prediction logic\nif submitted:\n    try:\n        # Prepare input data\n        input_data = {\n            'N_Days': n_days,\n            'Age': age,\n            'Sex': sex,\n            'Albumin': albumin,\n            'Alk_Phos': alk_phos,\n            'Bilirubin': bilirubin,\n            'Cholesterol': cholesterol,\n            'Copper': copper,\n            'SGOT': sgot,\n            'Tryglicerides': tryglicerides,\n            'Platelets': platelets,\n            'Prothrombin': prothrombin,\n            'Hepatomegaly': hepatomegaly,\n            'Spiders': spiders,\n            'Edema': edema,\n            'Ascites': ascites,\n            'Drug': drug\n        }\n\n        # Convert to DataFrame\n        input_df = pd.DataFrame([input_data])\n\n        # Encode categorical variables\n        for col in ['Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema']:\n            if col in input_df.columns:\n                # Ensure the column has the correct dtype before transformation\n                input_df[col] = input_df[col].astype(str)\n                input_df[col] = encoders[col].transform(input_df[col])\n\n\n        # One-hot encode Drug\n        if 'Drug' in input_df.columns:\n            input_df['Drug_Placebo'] = (input_df['Drug'] == 'placebo').astype(int)\n            input_df.drop('Drug', axis=1, inplace=True)\n\n\n        # Ensure all expected columns are present and in the correct order\n        for col in feature_names:\n            if col not in input_df.columns:\n                input_df[col] = 0\n\n        # Reorder columns to match training data\n        input_df = input_df[feature_names]\n\n        # Ensure dtypes match the training data X_train_std\n        # This is crucial for the scaler\n        # Access X_train_std from the global scope\n        global X_train_std # Declare X_train_std as global to access it\n        for col in input_df.columns:\n            if col in X_train_std.columns:\n                input_df[col] = input_df[col].astype(X_train_std[col].dtype)\n\n\n        # Standardize numerical features\n        # Identify numerical columns based on the preprocessed training data (X_train_std)\n        num_cols_to_standardize = X_train_std.select_dtypes(include=np.number).columns.tolist()\n\n        # Exclude columns that were binary encoded (now numbers)\n        binary_cols_encoded = ['Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema', 'Drug_Placebo']\n        num_cols_to_standardize = [col for col in num_cols_to_standardize if col not in binary_cols_encoded]\n\n\n        if num_cols_to_standardize:\n            input_df[num_cols_to_standardize] = scaler.transform(input_df[num_cols_to_standardize])\n\n\n        # Make prediction\n        prediction = model.predict(input_df)[0]\n        probabilities = model.predict_proba(input_df)[0]\n\n        # Adjust predicted stage back to original labels (1, 2, 3) if the model was zero-indexed\n        # Check the type of the loaded_model\n        if isinstance(model, XGBClassifier):\n            predicted_stage = prediction + 1\n        else:\n            predicted_stage = prediction\n\n\n        # Display results\n        st.success('## Prediction Results') # Added title to results section\n\n        # Create a nice results display\n        result_col1, result_col2 = st.columns(2)\n\n        with result_col1:\n            st.metric('Predicted Stage', str(int(predicted_stage))) # Cast to int for display\n\n            # Stage interpretation\n            if predicted_stage == 1:\n                st.info('**Stage 1**: Early fibrosis with no significant scarring')\n            elif predicted_stage == 2:\n                st.warning('**Stage 2**: Moderate fibrosis with some scarring')\n            else:\n                st.error('**Stage 3**: Severe fibrosis/cirrhosis with extensive scarring')\n\n        with result_col2:\n            st.write('**Prediction Probabilities**')\n            # Get original stage labels from the training data (y)\n            # Access y from the global scope\n            global y # Declare y as global to access it\n            stage_labels = sorted(y.unique())\n            prob_data = {\n                'Stage': stage_labels,\n                'Probability': [f'{prob*100:.1f}%' for prob in probabilities]\n            }\n            st.table(pd.DataFrame(prob_data))\n\n    except Exception as e:\n        st.error(f'An error occurred during prediction: {str(e)}')\n\n# Add footer\nst.markdown('---')\nst.markdown('''\n*Note: This prediction tool is for research purposes only.\nAlways consult with a healthcare professional for medical diagnosis.*\n''')